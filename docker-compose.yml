version: "3.9"

services:
  zookeeper:
    image: bitnamilegacy/zookeeper:3.8
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: bitnamilegacy/kafka:3.7
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server=localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  mongo:
    image: mongo:7
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10

  mongo-express:
    image: mongo-express:1.0
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=example
      - ME_CONFIG_MONGODB_URL=mongodb://root:example@mongo:27017/
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_healthy

  api:
    build: ./services/api
    env_file:
      - ./services/api/.env
    ports:
      - "4000:4000"
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy

  consumer:
    build: ./services/consumer
    env_file:
      - ./services/consumer/.env
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy

  runner:
    build: ./services/runner
    env_file:
      - ./services/runner/.env
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy

  poller:
    build: ./services/poller
    env_file:
      - ./services/poller/.env
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy

  frontend:
    build: ./apps/dashboard
    env_file:
      - ./apps/dashboard/.env
    ports:
      - "5173:5173"
    environment:
      - VITE_API_BASE=http://api:4000
    depends_on:
      - api

  prometheus:
    image: prom/prometheus:v2.55.1
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=90d
    volumes:
      - ./dev/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      api:
        condition: service_started

  grafana:
    image: grafana/grafana:11.2.0
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - ./dev/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./dev/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_started

volumes:
  mongo_data:
  prometheus_data:
  grafana_data: